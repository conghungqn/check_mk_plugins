#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Agent / MIB output
# see: 1.3.6.1.4.1.3375.2.2.5.1.2.1
# F5-BIGIP-LOCAL-MIB::ltmPoolName.              8.80.111.111.108.asci_encoded_str = Pool_NMA
# F5-BIGIP-LOCAL-MIB::ltmPoolMemberCnt.         8.80.111.111.108.95.78.77.65 = 2
# F5-BIGIP-LOCAL-MIB::ltmPoolActiveMemberCnt.   8.80.111.111.108.95.78.77.65 = 0

#Ip address hex to string helper
from socket import inet_ntoa

# warn, crit numbers of pool members
f5_bigip_pool_default_levels = (2, 1)


def inventory_f5_bigip_pool(checkname,info):
# inventorize all pools and their member count
    inventory = []
    state_info, stats_info, members_info = info
    for line in state_info:
        if line[0] != "":
            inventory.append((line[0],"f5_bigip_pool_default_levels"))
    return inventory


def get_counter_with_exeption(name, time, value):
    try:
        timedif, rate = get_counter(name,time,value)
    except MKCounterWrapped:
        timedif, rate = 0,0.0
    return (timedif, rate)

def check_f5_bigip_pool(item, params, info):
    this_time = time.time()
    state_info, stats_info, members_info = info
    red_members = []
    perfdata = []
    for line in members_info:
        if line[0] != "":
            if line[0] == item and line[1] == '1' and line[2] == '3' :
                ip = str(inet_ntoa(line[3]))
                port = str(line[4])
                red_members.append((ip + ":" + port))
    for line in stats_info:
        if line[0] != "":
            if line[0] == item:
                pool_max_conns = int(line[1])
                pool_cur_conns = int(line[2])
                pool_total_conns = int(line[3])
                timedif, rate = get_counter_with_exeption("snmp_pool_conn.%s" % item, this_time, pool_total_conns)
                perfdata = [ 
                         ("spawn_rate", rate), 
                         ("Current_connections", pool_cur_conns),
                ]
    for line in state_info:
        if line[0] == item:
            warn_num_members, crit_num_members = params
            pool_act_members = int(line[1])
            pool_def_members = int(line[2])
            pool_mem_data = ("pool_members", pool_act_members,'','',0,pool_def_members)
            perfdata.append(pool_mem_data)
            perf_sting = ". Conns: %s, ConnSpawnRate: %.2f/s" % (pool_cur_conns,rate)
            if len(red_members) == 0 and pool_act_members > 0 :
                return (0, "OK - all members online %s" % perf_sting,perfdata)
            elif pool_act_members == 0:
                return (2, "CRIT - no pool members left", perfdata)
            elif pool_act_members <= crit_num_members:
                return (2, "CRIT - only %s pool member(s) left %s. Downs: %s" % (pool_act_members,perf_sting," ".join(red_members)),perfdata)
            elif len(red_members) > 0 :
                return (1, "WARN - %i pool members are DOWN %s. Downs: %s" % (len(red_members), perf_sting, " ".join(red_members)),perfdata)
            else:
                return (3, "UNKNOWN output for pool %s" % item,perfdata)
    return (3, "UNKNOWN - unexpected Output from SNMP Agent")


snmp_info["f5_bigip_pool"] = [
    ( ".1.3.6.1.4.1.3375.2.2.5.1.2.1", [
        1,   #0 ltmPoolEntry
        8,   #1 ltmPoolActiveMemberCnt
        23,  #2 ltmPoolMemberCnt
      ]),
    ( ".1.3.6.1.4.1.3375.2.2.5.2.3.1", [
        1,  #0 ltmPoolStatName
        6,  #1 ltmPoolStatServerMaxConns 1.3.6.1.4.1.3375.2.2.5.2.3.1.6
        8,  #2 ltmPoolStatServerCurConns 1.3.6.1.4.1.3375.2.2.5.2.3.1.8
        7,  #3 ltmPoolStatServerTotConns 1.3.6.1.4.1.3375.2.2.5.2.3.1.7
      ]),
    ( ".1.3.6.1.4.1.3375.2.2.5.6.2.1", [
        1,  #0 PoolName of member 
        6,  #1 Admin status of the member
        5,  #2 Availability of the member
        3,  #3 Destination address of the member
        4,  #4 Destination port of the member
      ])
]


check_info["f5_bigip_pool"] = (check_f5_bigip_pool, "Load Balancing Pool %s", 1, inventory_f5_bigip_pool )


snmp_scan_functions["f5_bigip_pool"] = \
    lambda oid: '.1.3.6.1.4.1.3375.2' in oid(".1.3.6.1.2.1.1.2.0") and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower()
