#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Example output
# Name of a Virt. Server:
# 1.3.6.1.4.1.3375.2.2.10.2.3.1.1.ascii_encoded_string.  "VS_XX"
# Textual Status (only supported in F5 OS 9.3+
# 1.3.6.1.4.1.3375.2.2.10.1.2.1.25.5.12.34.56.78.90   "The virtual server is available"
# Table with name and status
# 1.3.6.1.4.1.3375.2.2.10.13.2.1.  1     .5.12.34.56.78.90  "VS_XX"
# 1.3.6.1.4.1.3375.2.2.10.13.2.1.  2     .5.12.34.56.78.90  1


def inventory_f5_bigip_vserver(checkname,info):
    inventory = []
    #import pprint;pprint.pprint(info)
    state_info, stats_info = info
    for line in state_info:
# snmp info will return some empty lines here, filter them and
# only inventorize OK status.
        if line[0] != "":
            if int(line[1]) == 1:
                inventory.append((line[0], None))
    return inventory

def get_counter_with_exeption(name, time, value):
    try:
        timedif, rate = get_counter(name,time,value)
    except MKCounterWrapped:
        timedif, rate = 0,0.0
    return (timedif, rate)

def check_f5_bigip_vserver(item, _no_params, info):
    this_time = time.time()
    state_info, stats_info = info
    for line in stats_info:
        if line[0] != "":
            if line[0] == item:
                #import pprint;pprint.pprint(line)
                statsPktIn = int(line[1])
                statsBytesIn = int(line[2])
                statsPktOut = int(line[3])
                statsBytesOut = int(line[4])
                statsTotConns = int(line[6])
                statsCurConns = int(line[7])
                timedif, ratePktIn = get_counter_with_exeption("snmp_virt_pktin.%s" % item, this_time, statsPktIn)
                timedif, rateBytesIn = get_counter_with_exeption("snmp_virt_bytesin.%s" % item, this_time, statsBytesIn)
                timedif, ratePktOut = get_counter_with_exeption("snmp_virt_pktout.%s" % item, this_time, statsPktOut)
                timedif, rateBytesOut = get_counter_with_exeption("snmp_virt_bytesout.%s" % item, this_time, statsBytesOut)
                timedif, rateTotConns = get_counter_with_exeption("snmp_virt_totconns.%s" % item, this_time, statsTotConns)
                perfdata = [
                    ("PktIn",ratePktIn),
                    ("PktOut", ratePktOut),
                    ("BytesIn", rateBytesIn),
                    ("BytesOut", rateBytesOut),
                    ("ConnSpawnRate", rateTotConns),
                    ("Connections", statsCurConns),
                ]
                break
    for line in state_info:
        if line[0] != "":
            if line[0] == item:
                status = int(line[1])
                perf_sting = ". in: %.2fB/s, out: %.2fB/s" % (rateBytesIn,rateBytesOut)
                if status == 0:
                    return (1, "WARN - Virtual Server is disabled %s" % perf_sting,perfdata)
                elif status == 1:
                    return (0, "OK - Virtual Server is up and available %s" % perf_sting,perfdata)
                elif status == 2:
                    return (2, "CRIT - Virtual Server is currently not available %s" % perf_sting,perfdata)
                elif status == 3:
                    return (2, "CRIT - Virtual Server is not available %s" % perf_sting,perfdata)
                elif status == 4:
                    return (1, "WARN - Virtual Server status is unknown %s" % perf_sting,perfdata)
                else:
                    return (3, "UNKNOWN")
    return (3, "UNKNOWN - Virtual Server %s not found in SNMP output" % item)



snmp_info["f5_bigip_vserver"] = [
    ( ".1.3.6.1.4.1.3375.2.2.10.1.2.1", [
        1, # Name
        2, # Status
      ]),
    ( ".1.3.6.1.4.1.3375.2.2.10.2.3.1", [
        1, #0 ltmVirtualServStatName 	1.3.6.1.4.1.3375.2.2.10.2.3.1.1
        6, #1 ltmVirtualServStatClientPktsIn 	1.3.6.1.4.1.3375.2.2.10.2.3.1.6
        7, #2 ltmVirtualServStatClientBytesIn 	1.3.6.1.4.1.3375.2.2.10.2.3.1.7
        8, #3 ltmVirtualServStatClientPktsOut 	1.3.6.1.4.1.3375.2.2.10.2.3.1.8
        9, #4 ltmVirtualServStatClientBytesOut 	1.3.6.1.4.1.3375.2.2.10.2.3.1.9
        10, #5 ltmVirtualServStatClientMaxConns 	1.3.6.1.4.1.3375.2.2.10.2.3.1.10
        11, #6 ltmVirtualServStatClientTotConns 	1.3.6.1.4.1.3375.2.2.10.2.3.1.11
        12, #7 ltmVirtualServStatClientCurConns 	1.3.6.1.4.1.3375.2.2.10.2.3.1.12
      ]),
]



check_info["f5_bigip_vserver"] = (check_f5_bigip_vserver, "Virtual Server %s", 1, inventory_f5_bigip_vserver )


snmp_scan_functions["f5_bigip_vserver"] = \
    lambda oid: '.1.3.6.1.4.1.3375.2' in oid(".1.3.6.1.2.1.1.2.0") and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower()
