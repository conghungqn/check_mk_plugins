#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["junos_srx_sessions_default_levels"] = {
    "session_levels"    : (80, 95),
}


def check_junos_srx_sessions(item, params, info):
    for line in info:
        if line[0] != "" and line[0] == item:
            warn, crit = params["session_levels"]
            sessionsCur = int(line[1])
            sessionsMax = int(line[2])
            sessionsWarn = warn / 100.0 * sessionsMax
            sessionsCrit = crit / 100.0 * sessionsMax
            perfdata = [("FlowSessions", sessionsCur, sessionsWarn,sessionsCrit, 0 , sessionsMax)]
            if sessionsCur > sessionsCrit:
                state = 2
            elif sessionsCur > sessionsWarn:
                state = 1
            else:
                state = 0
            return (state, "%i/%i (cur/max)" % (sessionsCur,sessionsMax),perfdata)
    return (3, "UNKNOWN - FlowSessions for %s not found!" % item)

def inventory_junos_srx_sessions(checkname,info):
    inventory = []
    for line in info:
        if line[0] != "":
            inventory.append((line[0], "junos_srx_sessions_default_levels"))
    return inventory


check_info["junos_srx_sessions"] = (check_junos_srx_sessions, " %s Flow Sessions", 1, inventory_junos_srx_sessions )

snmp_info["junos_srx_sessions"] = \
    ( ".1.3.6.1.4.1.2636.3.39.1.12.1.1.1", [
        11, # Desc
        6, #  CurSessions
        7, #  MAXSessions
      ])

check_default_levels["junos_srx_sessions"] = "junos_srx_sessions_default_levels"

snmp_scan_functions['junos_srx_sessions'] = \
    lambda oid: oid("1.3.6.1.2.1.1.2.0") in [
                           ".1.3.6.1.4.1.2636.1.1.1.2.26",
                           ".1.3.6.1.4.1.2636.1.1.1.2.28",
                           ".1.3.6.1.4.1.2636.1.1.1.2.34",
                           ".1.3.6.1.4.1.2636.1.1.1.2.35",
                           ".1.3.6.1.4.1.2636.1.1.1.2.49",
                           ".1.3.6.1.4.1.2636.1.1.1.2.58",
                           ]

