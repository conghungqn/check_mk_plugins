#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

junos_srx_cpu_default_levels = (80.0, 90.0)

def check_junos_srx_cpu(item, params, info):
    for line in info:
        if line[0] != "" and "%s CPU" % line[0] == item:
            util = float(line[1]) 
            infotext = " - %2.1f%% utilization" % util
            warn, crit = params
            perfdata = [("util", util, warn, crit, 0, 100)]
            if util >= crit:
                return (2, "CRIT" + infotext + " (critical at %d%%)" % crit, perfdata)
            elif util >= warn:
                return (1, "WARN" + infotext + " (warning at %d%%)" % warn, perfdata)
            else:
                return (0, "OK" + infotext, perfdata)
    return (3, "UNKNOWN - CPU data for %s not found!" % item)

def inventory_junos_srx_cpu(checkname,info):
    inventory = []
    for line in info:
        if line[0] != "":
            inventory.append(("%s CPU" % line[0], "junos_srx_cpu_default_levels"))
    return inventory

check_info["junos_srx_cpu"] = {
    "check_function"        : check_junos_srx_cpu,
    "inventory_function"    : inventory_junos_srx_cpu,
    "service_description"   : "CPU utilization",
    "has_perfdata"          : True,
    "group"                 : "cpu_utilization",
    "snmp_info"		    : ( ".1.3.6.1.4.1.2636.3.39.1.12.1.1.1", [ 11 , 4 ]),
}

snmp_scan_functions['junos_srx_cpu'] = \
    lambda oid: oid("1.3.6.1.2.1.1.2.0") in [
                           ".1.3.6.1.4.1.2636.1.1.1.2.26",
                           ".1.3.6.1.4.1.2636.1.1.1.2.28",
                           ".1.3.6.1.4.1.2636.1.1.1.2.34",
                           ".1.3.6.1.4.1.2636.1.1.1.2.35",
                           ".1.3.6.1.4.1.2636.1.1.1.2.49",
                           ".1.3.6.1.4.1.2636.1.1.1.2.58",
                           ]

